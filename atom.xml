<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[B.Ma's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-25T07:22:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[B.Ma]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用gulp.js实现前端自动化开发]]></title>
    <link href="http://yoursite.com/2015/09/10/%E4%BD%BF%E7%94%A8gulp-js%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2015/09/10/使用gulp-js实现前端自动化开发/</id>
    <published>2015-09-10T06:46:51.000Z</published>
    <updated>2015-10-25T07:22:31.000Z</updated>
    <content type="html"><![CDATA[<p>update: 我利用Yeoman和gulp实现了一个<a href="https://github.com/KennethMa/generator-kingdom" target="_blank" rel="external">前端脚手架生成器</a>，里面更新了gulp的配置</p>
<h2 id="WHY">WHY</h2><ul>
<li>页面重构使用sass等css预编译工具时，需要额外使用诸如<a href="http://koala-app.com/" target="_blank" rel="external">koala</a>等工具进行编译、压缩和合并，更改了<code>html</code>和<code>css</code>文件后需要手动刷新页面才能看见效果，有没有一款工具能帮做重构的同学自动检测文件变化重载浏览器窗口呢？</li>
<li>Sea.js模块写完后要手动刷新页面，普通的压缩工具无法保留<code>define</code>、<code>require</code>、<code>module</code>、<code>exports</code>等关键字，而且项目上线后的生产环境与开发环境不一样，出现bug如何调试呢？</li>
<li>项目完成后进行线上部署，浏览器会缓存我们写好的样式表和图片等静态资源，如果进行更新，如何让用户在访问时看到的是我们最新的成果呢？</li>
</ul>
<h2 id="<!-_more_->"><a id="more"></a></h2><h2 id="WHAT">WHAT</h2><blockquote>
<p>gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,你可以快速构建项目.</p>
</blockquote>
<p>因此，我们将通过这篇文章探讨如何使用gulp.js来改变前端开发流程，从而使开发工作更加快速高效。</p>
<hr>
<h2 id="HOW">HOW</h2><h3 id="1-_安装Node-js">1. 安装Node.js</h3><p>打开<a href="https://nodejs.org" target="_blank" rel="external">Node.js官网</a>，下载Node.js安装文件（当前版本是v4.0.0），完成安装后在powershell（如果使用cmd命令行，请确认当前用户账户是<code>Administrator</code>）中输入命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p>
<p>如图显示即安装成功；</p>
<p><img src="http://7tsyut.com1.z0.glb.clouddn.com/node-v.png" alt="node-v"></p>
<p>使用Mac OSX或Linux操作系统的请参考<a href="https://github.com/creationix/nvm" target="_blank" rel="external">这里</a>进行安装。</p>
<p><strong>注意：</strong>如果安装速度较慢，可以参考<a href="http://npm.taobao.org/" target="_blank" rel="external">这里</a>进行设置，使用淘宝的镜像。</p>
<h3 id="2-_安装gulp-js及gulp插件">2. 安装gulp.js及gulp插件</h3><h4 id="1-_全局安装gulp-js">1. <strong>全局</strong>安装gulp.js</h4><p>执行命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure></p>
<p>如图即安装成功<br><img src="http://7tsyut.com1.z0.glb.clouddn.com/npminstallgulp.png" alt="npminstallgulp"></p>
<p>其中，<code>npm</code>是node.js的包管理工具，<code>install</code>将执行安装命令，<code>-g</code>或者<code>--global</code>表示全局安装，<code>gulp</code>为此次安装的包。使用<code>npm</code>安装的包默认放在根目录的<code>node_modules</code>文件夹中。</p>
<h4 id="2-_把gulp和需要的gulp插件安装到项目的开发依赖中">2. 把gulp和需要的gulp插件安装到项目的开发依赖中</h4><p>执行命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p>
<p>其中，<code>--save-dev</code>参数表示把gulp作为项目的开发依赖包，如果是<code>--save</code>或<code>-s</code>，则表示作为项目的生产依赖包。</p>
<p>这次我们需要安装二十多个gulp插件，使用上述命令安装过于繁琐，我已经将所需的依赖包写在项目根目录的<code>package.json</code>中，直接执行<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>该命令将会分析<code>package.json</code>，自动安装需要的依赖包，更多关于<code>package.json</code>可以查看<a href="http://www.mujiang.info/translation/npmjs/files/package.json.html" target="_blank" rel="external">这里</a>。</p>
<h3 id="3-_使用gulp-js">3. 使用gulp.js</h3><p>终于来到了今天的正题，下面我将会为用到的gulp任务逐个作出说明，方便我们快速上手。</p>
<h4 id="1-_gulpfile-js">1. gulpfile.js</h4><p><code>gulpfile.js</code>是gulp的配置文件，位于项目的根目录（没有可自己新建一个），所有的自动化流程将在这里进行配置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">   uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   gulp.src(<span class="string">'js/app.js'</span>)</span><br><span class="line">      .pipe(uglify())</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'build'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>首先我们引入<code>gulp</code>和<code>gulp-uglify</code>模块，第4行代码将定义一个gulp所属的task，task的名字可自定义，回调函数中写入自动化代码逻辑，<code>src</code>表示需要导入处理的文件，可以用通配符<code>*</code>进行匹配，即<code>js/*.js</code>；<code>pipe</code>表示要执行的插件，第7行的<code>dest</code>指定了处理后的输出目录。</p>
<p><code>gulp.js</code>在进行构建时，采用了<a href="https://github.com/substack/stream-handbook" target="_blank" rel="external">数据流</a>的方式</p>
<blockquote>
<p>数据流能够通过一系列的小函数来传递数据，这些函数会对数据进行修改，然后把修改后的数据传递给下一个函数。<br><img src="http://7tsyut.com1.z0.glb.clouddn.com/flowchart.png" alt="flowchart"></p>
</blockquote>
<p>首先<code>src</code>生成对象流代表读取的文件，然后再通过各个管道——<code>pipe</code>，传递给<code>uglify()</code>函数进行处理，完毕后返回处理过的对象流，再传递给下一个pipe，最后传递给<code>gulp.dest()</code>函数，在指定目录输出处理过的文件。</p>
<p>在实际的<code>gulpfile.js</code>文件中，使用了<code>gulp-load-plugins</code>模块读取<code>package.json</code>中的<code>gulp</code>插件并自动加载，使用时如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>),</span><br><span class="line">    plugins = gulpLoadPlugins();</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   gulp.src(<span class="string">'js/app.js'</span>)</span><br><span class="line">      .pipe(plugins.uglify())</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'build'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>写完任务后，就可以在命令行中执行<code>gulp</code>任务了：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp minify</span><br></pre></td></tr></table></figure></p>
<p>更多关于<code>gulp</code>插件的信息，可以查看<a href="http://colobu.com/2014/11/17/gulp-plugins-introduction" target="_blank" rel="external">这里</a>的介绍，或者到<a href="https://www.npmjs.com/" target="_blank" rel="external">npm网站</a>搜索查看。</p>
<h4 id="2-_实操">2. 实操</h4><p>这里我将根据项目开发的三个主要流程分别介绍写好的<code>gulp</code>任务。</p>
<h5 id="1-_重构阶段">1. 重构阶段</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空css文件夹</span></span><br><span class="line">gulp.task(<span class="string">'sass-clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'css/*.css'</span>, &#123;read: <span class="literal">false</span>&#125;)</span><br><span class="line">        .pipe(plugins.clean());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译scss源文件，自动添加css前缀，</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/sass/*.scss'</span>)</span><br><span class="line">        .pipe(sass(&#123;outputStyle: <span class="string">'compressed'</span>&#125;).on(<span class="string">'error'</span>, sass.logError)) <span class="comment">// 压缩编译后的css</span></span><br><span class="line">        .pipe(plugins.autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">                <span class="string">"ie &gt;= 8"</span>,</span><br><span class="line">                <span class="string">"ie_mob &gt;= 10"</span>,</span><br><span class="line">                <span class="string">"ff &gt;= 26"</span>,</span><br><span class="line">                <span class="string">"chrome &gt;= 30"</span>,</span><br><span class="line">                <span class="string">"safari &gt;= 6"</span>,</span><br><span class="line">                <span class="string">"opera &gt;= 23"</span>,</span><br><span class="line">                <span class="string">"ios &gt;= 5"</span>,</span><br><span class="line">                <span class="string">"android &gt;= 2.3"</span>,</span><br><span class="line">                <span class="string">"bb &gt;= 10"</span></span><br><span class="line">            ],</span><br><span class="line">            cascade: <span class="literal">false</span>  <span class="comment">// 关闭自动美化属性值，提升效率</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'css'</span>))</span><br><span class="line">        .pipe(browserSync.stream())  <span class="comment">// 自动注入新的css</span></span><br><span class="line">        .pipe(plugins.notify(&#123; message: <span class="string">'Sass task complete'</span> &#125;));   <span class="comment">// 任务执行完毕添加提示</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控scss文件，发生变化时执行sass任务</span></span><br><span class="line">gulp.task(<span class="string">'sass-watch'</span>, [<span class="string">'sass'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">"src/sass/*.scss"</span>, [<span class="string">'sass'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用browserSync监控scss/html文件</span></span><br><span class="line">gulp.task(<span class="string">'sass-serve'</span>, [<span class="string">'sass'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        server: <span class="string">"./"</span>          <span class="comment">// 默认静态服务器的根目录为当前文件夹</span></span><br><span class="line">        <span class="comment">//proxy: "localhost:93"   // 本地部署后使用nginx配置好的端口访问</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    gulp.watch(<span class="string">"src/sass/*.scss"</span>, [<span class="string">'sass'</span>]);    <span class="comment">// 监听sass文件，发生变化后自动执行“sass”任务，注入css</span></span><br><span class="line">    gulp.watch([    <span class="comment">// 检测到html页面发生变化时，重新加载当前页面</span></span><br><span class="line">        <span class="string">'./*.html'</span>,</span><br><span class="line">        <span class="string">'common/*.shtm'</span>,</span><br><span class="line">        <span class="string">'kasp/*.html'</span>,</span><br><span class="line">        <span class="string">'kasp/**/*.html'</span>,</span><br><span class="line">        <span class="string">'kasp/include/*.shtm'</span>,</span><br><span class="line">        <span class="string">'kcsp/*.html'</span>,</span><br><span class="line">        <span class="string">'kcsp/**/*.html'</span>,</span><br><span class="line">        <span class="string">'kisp/*.html'</span>,</span><br><span class="line">        <span class="string">'kisp/**/*.html'</span></span><br><span class="line">    ]).on(<span class="string">'change'</span>, browserSync.reload);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>这里要注意</strong>，在使用<code>browserSync</code>工具时，可以启动一个本地http服务器来做最初的重构工作，目录可在这里的第39行定义，默认将该路径下的<code>index.html</code>文件作为入口文件；后期完成部署后，可以注释掉该行，打开第40行，将<code>server</code>端口号改为自己电脑上<code>nginx</code>配置的端口号，然后执行命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp sass-serve</span><br></pre></td></tr></table></figure></p>
<p>gulp将会自动监控指定目录下的<code>.html</code>、<code>.shtm</code>和<code>.scss</code>文件：<code>.html</code>和<code>.shtm</code>文件发生变化时将会自动刷新当前页面；<code>.scss</code>文件发生变化时，将自动编译并压缩成<code>.css</code>文件到指定目录，同时注入新的样式，不会刷新窗口。</p>
<p>其中各个子任务均可单独执行，功能如下：</p>
<ul>
<li><code>sass</code>任务将编译<code>.scss</code>文件到css文件夹；</li>
<li><code>sass-watch</code>监控<code>.scss</code>文件，当有文件发生变化时，执行<code>sass</code>任务；</li>
<li><code>sass-clean</code>将会清空css文件夹。</li>
</ul>
<p>还要补充一点的是，这里使用了<code>autoprefixer</code>插件自动为<code>.css</code>文件添加浏览器前缀，因此，在编写<code>.scss</code>时，可以不用再为特定的CSS3属性，如<code>transform</code>一个一个地写兼容代码了。</p>
<h5 id="2-_Sea-js模块编写阶段">2. Sea.js模块编写阶段</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对js文件进行语法和风格检查</span></span><br><span class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jsGlobal = &#123;    <span class="comment">// 忽略的模块变量</span></span><br><span class="line">        <span class="string">"$"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"$pager"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"kdalert"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"define"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"kdconfirm"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"KindEditor"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'js/src/**/*.js'</span>)</span><br><span class="line">        .pipe(plugins.jshint(&#123;options: <span class="string">'.jshintrc'</span>, globals: jsGlobal&#125;))</span><br><span class="line">        .pipe(plugins.jshint.reporter(<span class="string">'default'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空生成的模块</span></span><br><span class="line">gulp.task(<span class="string">'module-clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'js/dist'</span>, &#123;read: <span class="literal">false</span>&#125;)</span><br><span class="line">        .pipe(plugins.clean());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理sea.js模块</span></span><br><span class="line">gulp.task(<span class="string">'module'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = &#123;</span><br><span class="line">        mangle: &#123;except: [<span class="string">'define'</span>, <span class="string">'require'</span>, <span class="string">'module'</span>, <span class="string">'exports'</span>]&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> DEST = <span class="string">'js/dist'</span>;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'js/src/**/*.js'</span>)</span><br><span class="line">        .pipe(plugins.changed(DEST))        <span class="comment">// 只处理更改过的js文件，提高gulp task执行时的效率</span></span><br><span class="line">        .pipe(plugins.seajsTransport())<span class="comment">// 转换成标准的Module/Transport格式，提升sea.js效率</span></span><br><span class="line">        .pipe(plugins.sourcemaps.init())    <span class="comment">// 生成js压缩前后对应的map文件</span></span><br><span class="line">        .pipe(plugins.uglify(config))       <span class="comment">// 根据参数压缩js</span></span><br><span class="line">        .pipe(plugins.sourcemaps.write())</span><br><span class="line">        .pipe(gulp.dest(DEST));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行完module任务后重新加载窗口</span></span><br><span class="line">gulp.task(<span class="string">'module-watch'</span>, [<span class="string">'module'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 这里有一个技巧，直接写browserSync.reload会导致只刷新一次，封装到匿名函数里就ok了</span></span><br><span class="line">    browserSync.reload();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Browsersync并监控js文件</span></span><br><span class="line">gulp.task(<span class="string">'module-serve'</span>, [<span class="string">'module'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        proxy: <span class="string">"localhost:93"</span>   <span class="comment">// 本地部署后使用nginx配置好的端口访问，这里需要自己根据实际的端口号填写</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在任务组里添加browserSync.reload，使所有窗口在任务执行完后重新加载</span></span><br><span class="line">    gulp.watch(<span class="string">"js/src/**/*.js"</span>, [<span class="string">'module-watch'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>各个任务的功能</p>
<ul>
<li><code>jshint</code>：检查js语法和风格，执行时请修改<code>src</code>为自己的js文件路径，参数设置文件是位于根目录的<code>.jshintrc</code>，语法详见<a href="http://jshint.com/docs/options/" target="_blank" rel="external">官方文档</a>；</li>
<li><code>module-serve</code>：同样地，需要在这里的46行，更改端口号，并监控<code>.js</code>文件，发生变化将执行<code>module-watch</code>任务；</li>
<li><code>module-watch</code>：监控指定的<code>.js</code>文件，发生变化时将执行<code>module</code>任务，并刷新浏览器窗口；</li>
<li><code>module</code>：该任务会将指定目录下的<code>Sea.js</code>模块文件转换成标准的Module/Transport格式，并将模块进行压缩，提升<code>Sea.js</code>渲染页面和加载内容的效率，同时为压缩后的<code>.js</code>文件生成<code>sourcemap</code>，方便线上调试；</li>
<li><code>module-clean</code>：清空执行<code>module</code>任务生成的<code>.js</code>文件。</li>
</ul>
<h5 id="3-_项目部署阶段">3. 项目部署阶段</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css的版本控制</span></span><br><span class="line">gulp.task(<span class="string">'css-rev'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userefAssets = plugins.useref.assets(),</span><br><span class="line">        cssFilter = plugins.filter(<span class="string">"**/*.css"</span>, &#123;restore: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'index.html'</span>)</span><br><span class="line">        .pipe(userefAssets)  <span class="comment">// 解析html中build:&#123;type&#125;块，将里面引用到的文件合并传过来</span></span><br><span class="line">        .pipe(cssFilter)</span><br><span class="line">        .pipe(plugins.minifyCss())      <span class="comment">// 压缩Css</span></span><br><span class="line">        .pipe(cssFilter.restore)</span><br><span class="line">        .pipe(plugins.rev())            <span class="comment">// 重命名文件，添加版本号</span></span><br><span class="line">        .pipe(userefAssets.restore())</span><br><span class="line">        .pipe(plugins.useref())</span><br><span class="line">        .pipe(plugins.revReplace())     <span class="comment">// 重写文件名到html</span></span><br><span class="line">        .pipe(plugins.minifyHtml(&#123;      <span class="comment">// 压缩html</span></span><br><span class="line">            empty:<span class="literal">true</span>,</span><br><span class="line">            spare:<span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理图片</span></span><br><span class="line">gulp.task(<span class="string">'image'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'images_src/*'</span>, <span class="string">'images_src/**/*'</span>])</span><br><span class="line">        .pipe(plugins.cache(plugins.imagemin(&#123;  <span class="comment">// 缓存压缩过的图片</span></span><br><span class="line">            progressive: <span class="literal">true</span>,</span><br><span class="line">            svgoPlugins: [&#123;removeViewBox: <span class="literal">false</span>&#125;],</span><br><span class="line">            use: [pngquant()]</span><br><span class="line">        &#125;)))</span><br><span class="line">        <span class="comment">//.pipe(gulp.dest('images'))</span></span><br><span class="line">        .pipe(plugins.rev())              <span class="comment">// 重命名文件，并添加版本号</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">        .pipe(plugins.rev.manifest(&#123;</span><br><span class="line">            base: <span class="string">'rev/images'</span>,</span><br><span class="line">            merge: <span class="literal">true</span> <span class="comment">// 合并存在的manifest（如果存在的话）</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'rev/images'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片的版本控制</span></span><br><span class="line">gulp.task(<span class="string">'image-rev'</span>, [<span class="string">'image'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'rev/**/*.json'</span>, <span class="string">'index.html'</span>])</span><br><span class="line">        .pipe( plugins.revCollector(&#123;</span><br><span class="line">            replaceReved: <span class="literal">true</span>,</span><br><span class="line">            dirReplacements: &#123;</span><br><span class="line">                <span class="string">'images_src'</span>: <span class="string">'dist/images'</span></span><br><span class="line">                <span class="comment">// 使用CDN</span></span><br><span class="line">                <span class="comment">//'images_src/': function(manifest_value) &#123;</span></span><br><span class="line">                <span class="comment">//    return '//cdn' + (Math.floor(Math.random() * 9) + 1) + '.' + 'kingdom' + '/img/' + manifest_value;</span></span><br><span class="line">                <span class="comment">//&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行revision任务前建议清空dist文件夹</span></span><br><span class="line">gulp.task(<span class="string">'rev-clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'dist/styles'</span>, <span class="string">'dist/images'</span>], &#123;read: <span class="literal">false</span>&#125;)</span><br><span class="line">        .pipe(plugins.clean());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整合各版本控制任务</span></span><br><span class="line">gulp.task(<span class="string">'rev'</span>, [<span class="string">'rev-clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.start(<span class="string">'image-rev'</span>, <span class="string">'css-rev'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>css-rev</code>：为指定目录下<code>.html</code>中引用的<code>.css</code>文件添加版本号，并在页面中替换相应的css路径，执行该任务前需要在指定的<code>.html</code>文件中进行配置，详细介绍请看<a href="https://github.com/jonkemp/gulp-useref" target="_blank" rel="external">这里</a>，项目中的例子如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- build:css ./dist/styles/main.css --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"css/common.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"css/jquery.bxslider.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"css/jquery.myslider.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"css/scroll_layout.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"css/home.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"css/a.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>image</code>：压缩图片并生成版本号；</p>
</li>
<li><code>image-rev</code>：替换指定<code>.html</code>文件中<code>img</code>标签的路径；</li>
<li><code>rev-clean</code>：清空生成的部署文件；</li>
<li><code>rev</code>：异步执行<code>css-rev</code>任务和<code>image-rev</code>任务</li>
</ul>
<p>至此，本次分享就到这里，希望对各位的工作有所帮助，谢谢大家:D</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>update: 我利用Yeoman和gulp实现了一个<a href="https://github.com/KennethMa/generator-kingdom">前端脚手架生成器</a>，里面更新了gulp的配置</p>
<h2 id="WHY">WHY</h2><ul>
<li>页面重构使用sass等css预编译工具时，需要额外使用诸如<a href="http://koala-app.com/">koala</a>等工具进行编译、压缩和合并，更改了<code>html</code>和<code>css</code>文件后需要手动刷新页面才能看见效果，有没有一款工具能帮做重构的同学自动检测文件变化重载浏览器窗口呢？</li>
<li>Sea.js模块写完后要手动刷新页面，普通的压缩工具无法保留<code>define</code>、<code>require</code>、<code>module</code>、<code>exports</code>等关键字，而且项目上线后的生产环境与开发环境不一样，出现bug如何调试呢？</li>
<li>项目完成后进行线上部署，浏览器会缓存我们写好的样式表和图片等静态资源，如果进行更新，如何让用户在访问时看到的是我们最新的成果呢？</li>
</ul>
<h2 id="<!-_more_->">]]>
    
    </summary>
    
      <category term="Node.js Gulp.js 前端工程" scheme="http://yoursite.com/tags/Node-js-Gulp-js-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
</feed>
